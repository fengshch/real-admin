server:
  port: 8080

spring:
  security:
    oauth2:
      client:
        registration:
          messaging-client-oidc:
            provider: spring
            client-id: messaging-client
            client-secret: secret
            authorization-grant-type: authorization_code
            redirect-uri: "http://127.0.0.1:8080/login/oauth2/code/{registrationId}"
            scope: openid,profile,message.read
            client-name: messaging-client-oidc
          messaging-client-authorization-code:
            provider: spring
            client-id: messaging-client
            client-secret: secret
            authorization-grant-type: authorization_code
            redirect-uri: "http://127.0.0.1:8080/authorized"
            scope: message.read,message.write
            client-name: messaging-client-authorization-code
        provider:
          spring:
            issuer-uri: http://localhost:9000
  cloud:
    gateway:
      mvc:
        routes:
          - id: userinfo
            uri: http://localhost:9000
            predicates:
              - Path=/userinfo
            filters:
              - TokenRelay=
          - id: messages
            uri: http://localhost:8090
            predicates:
              - Path=/messages
            filters:
#              - TokenRelay=
              - RelayTokenIfExists=messaging-client-oidc

app:
  base-uri: http://127.0.0.1:3000

logging:
  level:
    root: info
    org.springframework.web: info
    org.springframework.security: trace
    org.springframework.security.oauth2: trace